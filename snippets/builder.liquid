{% comment %}
  Product Bundler Snippet
  Snippet do wywołania przez Custom Liquid w sekcji main-product
{% endcomment %}

{% assign bundle_collection = collections['smells-like'] %}
{% unless bundle_collection %}
  {% assign bundle_collection = collections.first %}
{% endunless %}



<div class="product-bundler" data-bundler>
      <!-- Header -->
      <div class="bundler-header">
        <div class="bundler-title">
          <h1>Create Your Box</h1>
          <p class="bundler-subtitle">Best scents you've ever smelled or your money back.</p>
          <div class="bundler-reviews">
            <div class="stars">★★★★★</div>
            <span class="review-count">{{ shop.metafields.judgeme.all_reviews_count | default: '150,983' }} Reviews</span>
          </div>
        </div>
      </div>

      <!-- Bundle Type Selection -->
      <div class="bundle-type-selection">
        <div class="bundle-type-buttons">
          <button class="bundle-type-btn active" data-bundle-type="2+1" onclick="selectBundleType('2+1')">
            <span class="bundle-type-title">2+1 FREE</span>
            <span class="bundle-type-desc">Buy 2, Get 1 Free</span>
          </button>
          <button class="bundle-type-btn" data-bundle-type="3+2" onclick="selectBundleType('3+2')">
            <span class="bundle-type-title">3+2 FREE</span>
            <span class="bundle-type-desc">Buy 3, Get 2 Free</span>
          </button>
          <button class="bundle-type-btn" data-bundle-type="4+3" onclick="selectBundleType('4+3')">
            <span class="bundle-type-title">4+3 FREE</span>
            <span class="bundle-type-desc">Buy 4, Get 3 Free</span>
          </button>
          <button class="bundle-type-btn" data-bundle-type="5+4" onclick="selectBundleType('5+4')">
            <span class="bundle-type-title">5+4 FREE</span>
            <span class="bundle-type-desc">Buy 5, Get 4 Free</span>
          </button>
        </div>
      </div>



      <!-- Search and Filter Section -->
      <div class="bundler-search-filter">
        <div class="search-container">
          <input type="text" id="searchInput" placeholder="Search for scents..." onkeyup="filterProducts()">
        </div>
        <div class="filter-container">
          <button class="filter-btn active" data-filter="all" onclick="filterByCategory('all')">All</button>
          <button class="filter-btn" data-filter="man" onclick="filterByCategory('man')">Man</button>
          <button class="filter-btn" data-filter="woman" onclick="filterByCategory('woman')">Woman</button>
        </div>
      </div>

      <!-- Main Content with Sidebar -->
      <div class="bundler-main-content">
        <!-- Products Grid -->
        <div class="bundler-products" id="productsGrid">
          {% for product in bundle_collection.products %}
            {% assign default_variant = product.variants | where: "title", "100ML" | first %}
            {% unless default_variant %}
              {% assign default_variant = product.variants.first %}
            {% endunless %}
            
            <div class="product-card bundler-product" data-product-id="{{ product.id }}" data-variant-id="{{ default_variant.id }}" data-category="{{ product.tags | join: ' ' | downcase }}">
              <!-- Product Badge -->
              {% if product.tags contains 'new' %}
                <div class="product-badge new">New</div>
              {% elsif product.tags contains 'popular' %}
                <div class="product-badge popular">Most Popular</div>
              {% endif %}
              
              <!-- Product Image -->
              <div class="product-image">
                <img src="{{ product.featured_image | image_url: width: 200 }}" alt="{{ product.title }}" loading="lazy">
              </div>
              
              <!-- Product Info -->
              <div class="product-info">
                <h3 class="product-title">{{ product.title }}</h3>
                
                <!-- Reviews -->
                <div class="product-reviews">
                  <div class="stars">★★★★★</div>
                  <span class="review-count">5 ({{ product.metafields.judgeme.reviews_count | default: '150' }})</span>
                </div>
                
                <!-- Variant and Price -->
                <div class="product-variant-price">
                  <select class="variant-select" data-product-id="{{ product.id }}" onchange="updateVariant({{ product.id }}, this.value);">
                    {% for variant in product.variants %}
                      {% if variant.title contains '30ML' or variant.title contains '50ML' or variant.title contains '100ML' %}
                        <option value="{{ variant.id }}" 
                                data-price="{{ variant.price | money }}"
                                {% if variant.title contains '100ML' %}selected{% endif %}>
                          {{ variant.title }} - {{ variant.price | money }}
                        </option>
                      {% endif %}
                    {% endfor %}
                  </select>
                </div>
                
                <!-- Add to Box Button -->
                <button class="add-to-box-btn" onclick="selectProduct({{ product.id }}, {{ default_variant.id }});">
                  Add to Box
                </button>
              </div>
              
              <!-- Selection Indicator -->
              <div class="selection-indicator" style="display: none;">
                <div class="check-icon">✓</div>
              </div>
            </div>
          {% endfor %}
        </div>

        <!-- Shopping Cart Sidebar -->
        <div class="bundler-sidebar">
          <div class="sidebar-content">
            <h3 class="sidebar-title">Shopping Cart</h3>
            
            <!-- Progress Section -->
            <div class="cart-progress">
              <div class="progress-text" id="cartProgressText">Please select at least 2 scents</div>
              <div class="progress-bar">
                <div class="progress-fill" id="cartProgressFill"></div>
                <div class="progress-markers" id="progressMarkers">
                  <!-- Markers will be generated dynamically -->
                </div>
              </div>
            </div>

            <!-- Selected Items -->
            <div class="selected-items" id="selectedItems">
              <div class="empty-cart">
                <p>Your cart is empty.</p>
              </div>
            </div>

            <!-- Add Bundle Button -->
            <div class="sidebar-footer">
              <button id="addBundleBtn" class="add-bundle-btn" onclick="addBundleToCart()" disabled>
                ADD BUNDLE TO CART
              </button>
            </div>
          </div>
        </div>
      </div>

    </div>
</div>

<style>
/* Bundler Styles - bez modala */
.product-bundler {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

/* Header */
.bundler-header {
  text-align: center;
  padding: 40px 32px 32px 32px;
  background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
  border-bottom: 1px solid #eee;
}

.bundler-title h1 {
  margin: 0 0 8px 0;
  font-size: 2.5rem;
  font-weight: 800;
  color: #222;
  letter-spacing: -0.5px;
}

.bundler-subtitle {
  margin: 0 0 16px 0;
  font-size: 1.1rem;
  color: #666;
  font-weight: 500;
}

.bundler-reviews {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.stars {
  color: #ffd700;
  font-size: 1.1rem;
  letter-spacing: 2px;
}

.review-count {
  font-size: 0.9rem;
  color: #666;
  font-weight: 500;
}

/* Bundle Type Selection */
.bundle-type-selection {
  padding: 32px;
  background-color: white;
  border-bottom: 1px solid #eee;
}

.bundle-type-buttons {
  display: flex;
  justify-content: center;
  gap: 16px;
  max-width: 800px;
  margin: 0 auto;
  flex-wrap: wrap;
}

.bundle-type-btn {
  background: white;
  border: 2px solid #e0e0e0;
  border-radius: 16px;
  padding: 20px 24px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  min-width: 140px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.bundle-type-btn:hover {
  border-color: #28a745;
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(40, 167, 69, 0.15);
}

.bundle-type-btn.active {
  border-color: #28a745;
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  box-shadow: 0 4px 16px rgba(40, 167, 69, 0.3);
}

.bundle-type-title {
  font-size: 1.2rem;
  font-weight: 700;
  color: #222;
}

.bundle-type-desc {
  font-size: 0.85rem;
  color: #666;
  font-weight: 500;
}

.bundle-type-btn.active .bundle-type-title,
.bundle-type-btn.active .bundle-type-desc {
  color: white;
}



.progress-step.free-step .progress-indicator {
  border-color: #28a745;
}

/* Search and Filter */
.bundler-search-filter {
  padding: 24px 32px;
  background-color: white;
  border-bottom: 1px solid #eee;
}

.search-container {
  margin-bottom: 16px;
}

.search-container input {
  width: 100%;
  padding: 14px 18px;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  font-size: 1rem;
  outline: none;
  transition: all 0.3s ease;
  background-color: #f8f9fa;
}

.search-container input:focus {
  border-color: #28a745;
  background-color: white;
  box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
}

.filter-container {
  display: flex;
  gap: 12px;
  justify-content: center;
}

.filter-btn {
  padding: 10px 20px;
  border: 2px solid #e0e0e0;
  border-radius: 25px;
  background: white;
  color: #222;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 600;
  transition: all 0.3s ease;
}

.filter-btn:hover {
  border-color: #28a745;
  transform: translateY(-1px);
}

.filter-btn.active {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  border-color: #28a745;
  box-shadow: 0 4px 12px rgba(40, 167, 69, 0.2);
}

/* Main Content Layout */
.bundler-main-content {
  display: flex;
  gap: 32px;
  min-height: 600px;
}

/* Products Grid */
.bundler-products {
  flex: 1;
  padding: 32px;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 24px;
  background-color: #f8f9fa;
  border-radius: 16px;
}

/* Mobile - 2 columns */
@media (max-width: 768px) {
  .bundler-products {
    grid-template-columns: repeat(2, 1fr);
    gap: 16px;
    padding: 20px;
  }
}

@media (max-width: 480px) {
  .bundler-products {
    grid-template-columns: 1fr;
    gap: 16px;
    padding: 16px;
  }
}

.product-card {
  border: 2px solid #e0e0e0;
  border-radius: 16px;
  padding: 20px;
  position: relative;
  background: white;
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  min-height: 450px;
  display: flex;
  flex-direction: column;
}

.product-card:hover {
  border-color: #28a745;
  transform: translateY(-4px);
  box-shadow: 0 8px 25px rgba(40, 167, 69, 0.15);
}

.product-card.selected {
  border-color: #28a745;
  background: linear-gradient(135deg, #f8fff9 0%, #ffffff 100%);
  box-shadow: 0 8px 25px rgba(40, 167, 69, 0.2);
  transform: translateY(-4px);
}

/* Product Badge */
.product-badge {
  position: absolute;
  top: 12px;
  left: 12px;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.7rem;
  font-weight: 700;
  text-transform: uppercase;
  z-index: 2;
}

.product-badge.new {
  background-color: #ffd700;
  color: #222;
}

.product-badge.popular {
  background-color: #ff6b6b;
  color: white;
}

/* Product Image */
.product-image {
  text-align: center;
  margin-bottom: 16px;
  position: relative;
}

.product-image img {
  width: 100%;
  height: 250px;
  object-fit: cover;
  border-radius: 8px;
  transition: transform 0.3s ease;
}

.product-card:hover .product-image img {
  transform: scale(1.05);
}

/* Product Info */
.product-info {
  text-align: center;
  flex: 1;
  display: flex;
  flex-direction: column;
}

.product-title {
  margin: 0 0 8px 0;
  font-size: 1.1rem;
  font-weight: 700;
  color: #222;
  line-height: 1.3;
}

/* Product Reviews */
.product-reviews {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  margin-bottom: 12px;
}

.product-reviews .stars {
  color: #ffd700;
  font-size: 0.9rem;
  letter-spacing: 1px;
}

.product-reviews .review-count {
  font-size: 0.8rem;
  color: #666;
  font-weight: 500;
}

/* Variant and Price */
.product-variant-price {
  margin-bottom: 16px;
}

.variant-select {
  width: 100%;
  padding: 10px 12px;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  font-size: 0.9rem;
  background: white;
  color: #222;
  font-weight: 500;
  transition: all 0.3s ease;
}

.variant-select:focus {
  outline: none;
  border-color: #28a745;
  box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
}

/* Add to Box Button */
.add-to-box-btn {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #28a745;
  border-radius: 8px;
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  font-size: 0.9rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-top: auto;
  align-self: flex-end;
}

.add-to-box-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
}

.add-to-box-btn.selected {
  background: #666;
  border-color: #666;
  cursor: default;
}

/* Selection Indicator */
.selection-indicator {
  position: absolute;
  top: 12px;
  right: 12px;
  width: 28px;
  height: 28px;
  border: 2px solid #28a745;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #28a745;
  opacity: 0;
  transition: all 0.3s ease;
}

.product-card.selected .selection-indicator {
  opacity: 1;
}

.check-icon {
  color: white;
  font-size: 14px;
  font-weight: bold;
}

/* Shopping Cart Sidebar */
.bundler-sidebar {
  width: 320px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 20px;
  height: fit-content;
  max-height: calc(100vh - 40px);
}

.sidebar-content {
  padding: 24px;
}

.sidebar-title {
  margin: 0 0 20px 0;
  font-size: 1.3rem;
  font-weight: 700;
  color: #222;
  text-align: center;
}

/* Cart Progress */
.cart-progress {
  margin-bottom: 24px;
  padding: 16px;
  background: #f8f9fa;
  border-radius: 12px;
}

.progress-text {
  font-size: 0.9rem;
  color: #666;
  text-align: center;
  margin-bottom: 12px;
  font-weight: 500;
}

.progress-bar {
  height: 20px;
  background: #e0e0e0;
  border-radius: 10px;
  position: relative;
  margin-bottom: 8px;
  overflow: hidden;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
}

.progress-fill {
  height: 100%;
  background: #28a745;
  border-radius: 10px;
  transition: width 0.5s ease;
  width: 0%;
  position: relative;
  display: block;
  box-sizing: border-box;
}

.progress-markers {
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  transform: translateY(-50%);
  display: flex;
  justify-content: space-between;
  pointer-events: none;
  z-index: 10;
  padding: 0 12px;
}

.marker {
  position: relative;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: white;
  border: 3px solid #e0e0e0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.8rem;
  font-weight: 700;
  color: #666;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  pointer-events: auto;
  z-index: 11;
}

.buy-marker {
  border-color: #ddd;
}

.free-marker {
  border-color: #28a745;
  background: #e8f5e8;
  color: #28a745;
}

.marker.active {
  background: #28a745;
  border-color: #28a745;
  color: white;
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
}

/* Selected Items */
.selected-items {
  margin-bottom: 24px;
}

.empty-cart {
  text-align: center;
  padding: 40px 20px;
  color: #666;
}

.empty-cart p {
  margin: 0;
  font-size: 0.9rem;
}

.selected-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  margin-bottom: 8px;
  background: white;
  transition: all 0.3s ease;
}

.selected-item:hover {
  border-color: #28a745;
  box-shadow: 0 2px 8px rgba(40, 167, 69, 0.1);
}

.selected-item-image {
  width: 40px;
  height: 40px;
  border-radius: 6px;
  object-fit: cover;
  flex-shrink: 0;
}

.selected-item-info {
  flex: 1;
  min-width: 0;
}

.selected-item-title {
  font-size: 0.9rem;
  font-weight: 600;
  color: #222;
  margin: 0 0 4px 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.selected-item-variant {
  font-size: 0.8rem;
  color: #666;
  margin: 0;
}

.selected-item-remove {
  background: none;
  border: none;
  color: #ff6b6b;
  cursor: pointer;
  font-size: 1.2rem;
  padding: 4px;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.selected-item-remove:hover {
  background: #ff6b6b;
  color: white;
}

/* Free Badge */
.free-badge {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  font-size: 0.7rem;
  font-weight: 700;
  padding: 4px 8px;
  border-radius: 12px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-right: 8px;
}

.free-item {
  border-color: #28a745 !important;
  background: linear-gradient(135deg, #f8fff9 0%, #ffffff 100%) !important;
}

/* Sidebar Footer */
.sidebar-footer {
  border-top: 1px solid #e0e0e0;
  padding-top: 20px;
}

.add-bundle-btn {
  width: 100%;
  padding: 16px;
  border: none;
  border-radius: 12px;
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.add-bundle-btn:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
}

.add-bundle-btn:disabled {
  background: #e0e0e0;
  color: #666;
  cursor: not-allowed;
  transform: none;
}

.product-price {
  font-size: 1.1rem;
  font-weight: 700;
  color: #222;
  margin-bottom: 12px;
}

.product-variant {
  margin-bottom: 12px;
}

.product-variant label {
  display: block;
  font-size: 0.8rem;
  color: #666;
  margin-bottom: 4px;
}

.variant-select {
  width: 100%;
  padding: 6px 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.9rem;
  background: white;
}

.category-tag {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.7rem;
  font-weight: 600;
  text-transform: uppercase;
}

.category-tag.man {
  background-color: #e3f2fd;
  color: #1976d2;
}

.category-tag.woman {
  background-color: #fce4ec;
  color: #c2185b;
}







/* Responsive */
@media (max-width: 1024px) {
  .bundler-main-content {
    flex-direction: column;
    gap: 24px;
  }
  
  .bundler-sidebar {
    width: 100%;
    position: static;
    max-height: none;
  }
}

@media (max-width: 768px) {
  .bundler-header {
    padding: 24px 20px;
  }
  
  .bundler-title h1 {
    font-size: 2rem;
  }
  
  .bundle-type-buttons {
    flex-direction: column;
    align-items: center;
  }
  
  .bundle-type-btn {
    min-width: 200px;
  }
  
  .bundler-search-filter {
    padding: 20px;
  }
  
  .filter-container {
    flex-wrap: wrap;
  }
  
  .bundler-products {
    padding: 20px;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  }
  
  .product-card {
    min-height: 400px;
  }
  
  .product-image img {
    height: 200px;
  }
}
</style>

<script>
// Global variables
let selectedProducts = [];
let currentFilter = 'all';
let currentSearch = '';
let currentBundleType = '2+1'; // Default bundle type
let bundleConfig = {
  '2+1': { buy: 2, free: 1, total: 3 },
  '3+2': { buy: 3, free: 2, total: 5 },
  '4+3': { buy: 4, free: 3, total: 7 },
  '5+4': { buy: 5, free: 4, total: 9 }
};

// Bundle type selection
function selectBundleType(bundleType) {
  currentBundleType = bundleType;
  selectedProducts = []; // Reset selections when changing bundle type
  
  // Update button states
  document.querySelectorAll('.bundle-type-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  event.target.closest('.bundle-type-btn').classList.add('active');
  
  // Update progress text
  updateProgressText();
  
  // Generate progress markers
  generateProgressMarkers();
  
  // Update cart progress
  updateCartProgress();
  
  // Update selected items
  updateSelectedItems();
  
  // Update add button
  updateAddButton();
  
  // Reset product selections
  document.querySelectorAll('.product-card').forEach(card => {
    card.classList.remove('selected');
    const button = card.querySelector('.add-to-box-btn');
    if (button) {
      button.textContent = 'Add to Box';
      button.classList.remove('selected');
    }
    const indicator = card.querySelector('.selection-indicator');
    if (indicator) {
      indicator.style.display = 'none';
    }
  });
}



// Get ordinal suffix (1st, 2nd, 3rd, etc.)
function getOrdinalSuffix(num) {
  if (num >= 11 && num <= 13) return 'th';
  switch (num % 10) {
    case 1: return 'st';
    case 2: return 'nd';
    case 3: return 'rd';
    default: return 'th';
  }
}

// Update progress text
function updateProgressText() {
  const cartProgressText = document.getElementById('cartProgressText');
  const config = bundleConfig[currentBundleType];
  
  let text = '';
  if (selectedProducts.length === 0) {
    text = `Please select at least ${config.buy} scents`;
  } else if (selectedProducts.length < config.buy) {
    text = `Please select ${config.buy - selectedProducts.length} more scents`;
  } else if (selectedProducts.length < config.total) {
    text = `Great! You can add ${config.total - selectedProducts.length} more scents for free`;
  } else {
    text = 'Perfect! Your bundle is ready';
  }
  
  if (cartProgressText) cartProgressText.textContent = text;
}

// Generate progress markers
function generateProgressMarkers() {
  const markersContainer = document.getElementById('progressMarkers');
  const config = bundleConfig[currentBundleType];
  
  if (markersContainer) {
    let markersHTML = '';
    
    // Add buy markers
    for (let i = 1; i <= config.buy; i++) {
      markersHTML += `<span class="marker buy-marker" data-value="${i}">${i}</span>`;
    }
    
    // Add free markers
    for (let i = config.buy + 1; i <= config.total; i++) {
      markersHTML += `<span class="marker free-marker" data-value="${i}">${i}</span>`;
    }
    
    markersContainer.innerHTML = markersHTML;
  }
}

// Update cart progress bar
function updateCartProgress() {
  const progressFill = document.getElementById('cartProgressFill');
  const config = bundleConfig[currentBundleType];
  
  if (progressFill) {
    // Calculate progress from 0 to total (not from buy to total)
    const progressPercent = (selectedProducts.length / config.total) * 100;
    progressFill.style.width = progressPercent + '%';
  }
  
  // Update markers
  document.querySelectorAll('.marker').forEach(marker => {
    const value = parseInt(marker.dataset.value);
    if (selectedProducts.length >= value) {
      marker.classList.add('active');
    } else {
      marker.classList.remove('active');
    }
  });
}

// Update selected items in sidebar
function updateSelectedItems() {
  const selectedItemsContainer = document.getElementById('selectedItems');
  const config = bundleConfig[currentBundleType];
  
  if (selectedProducts.length === 0) {
    selectedItemsContainer.innerHTML = `
      <div class="empty-cart">
        <p>Your cart is empty.</p>
      </div>
    `;
    return;
  }
  
  let itemsHTML = '';
  selectedProducts.forEach((product, index) => {
    const isFree = index >= config.buy;
    const freeBadge = isFree ? '<span class="free-badge">FREE</span>' : '';
    
    itemsHTML += `
      <div class="selected-item ${isFree ? 'free-item' : ''}" data-product-id="${product.id}">
        <img src="${product.image || ''}" alt="${product.title}" class="selected-item-image">
        <div class="selected-item-info">
          <h4 class="selected-item-title">${product.title}</h4>
          <p class="selected-item-variant">${product.variant || '100ML'}</p>
        </div>
        ${freeBadge}
        <button class="selected-item-remove" onclick="removeFromCart(${product.id})">×</button>
      </div>
    `;
  });
  
  selectedItemsContainer.innerHTML = itemsHTML;
}

// Remove item from cart
function removeFromCart(productId) {
  const productCard = document.querySelector(`[data-product-id="${productId}"]`);
  if (productCard) {
    selectProduct(productId, productCard.dataset.variantId);
  }
}

// Initialize bundler
document.addEventListener('DOMContentLoaded', function() {
  console.log('Bundle page script loaded!');
  console.log('Products grid found:', document.getElementById('productsGrid'));
  console.log('Product cards found:', document.querySelectorAll('.product-card').length);
  
  // Check if functions are defined
  console.log('selectProduct function exists:', typeof selectProduct);
  console.log('applyFilters function exists:', typeof applyFilters);
  
  updateProgressText();
  generateProgressMarkers();
  updateCartProgress();
  updateSelectedItems();
  
  // updateProgress will be called after function is defined
  if (typeof applyFilters === 'function') {
    applyFilters(); // Apply initial filters
  } else {
    console.error('applyFilters function not found!');
  }
});



// Product selection
function selectProduct(productId, variantId) {
  console.log('selectProduct called with:', productId, 'variant:', variantId);
  
  const productCard = document.querySelector(`[data-product-id="${productId}"]`);
  console.log('productCard found:', productCard);
  
  if (!productCard) {
    console.error('Product card not found for ID:', productId);
    return;
  }
  
  const config = bundleConfig[currentBundleType];
  
  // Check if already selected by looking for the selected class
  const isSelected = productCard.classList.contains('selected') || productCard.style.borderColor === 'rgb(40, 167, 69)';
  console.log('isSelected:', isSelected);
  
  if (isSelected) {
    // Deselect product
    console.log('Deselecting product');
    productCard.classList.remove('selected');
    
    // Reset button text
    const button = productCard.querySelector('.add-to-box-btn');
    if (button) {
      button.textContent = 'Add to Box';
      button.classList.remove('selected');
    }
    
    // Hide selection indicator
    const indicator = productCard.querySelector('.selection-indicator');
    if (indicator) {
      indicator.style.display = 'none';
    }
    
    selectedProducts = selectedProducts.filter(p => p.id !== productId);
    
    // Update progress text and indicators
    updateProgressText();
    updateCartProgress();
    updateSelectedItems();
    
  } else {
    // Select product (check max based on bundle type)
    console.log('Current selected products:', selectedProducts.length);
    if (selectedProducts.length >= config.total) {
      alert(`You can only select ${config.total} scents for this bundle`);
      return;
    }
    
    // Get product title
    const productTitle = productCard.querySelector('.product-title');
    const title = productTitle ? productTitle.textContent : 'Unknown Product';
    
    // Get price
    const priceElement = productCard.querySelector('.product-price');
    const price = priceElement ? priceElement.textContent : '';
    
    console.log('Adding product to selection:', { id: productId, variantId, title, price });
    
    // Add selected class
    productCard.classList.add('selected');
    
    // Find and update the button
    const button = productCard.querySelector('.add-to-box-btn');
    
    if (button) {
      button.textContent = 'Selected';
      button.classList.add('selected');
      console.log('Button changed to Selected');
    }
    
    // Show selection indicator
    const indicator = productCard.querySelector('.selection-indicator');
    if (indicator) {
      indicator.style.display = 'flex';
    }
    
    // Get product image
    const productImage = productCard.querySelector('.product-image img');
    const image = productImage ? productImage.src : '';
    
    // Get selected variant
    const variantSelect = productCard.querySelector('.variant-select');
    const selectedOption = variantSelect.options[variantSelect.selectedIndex];
    const variant = selectedOption ? selectedOption.textContent.split(' - ')[0] : '100ML';
    
    selectedProducts.push({
      id: productId,
      variantId: parseInt(variantId),
      title: title,
      price: price,
      image: image,
      variant: variant
    });
    
    console.log('Product added to selection. Total:', selectedProducts.length);
    
    // Update progress text and indicators
    updateProgressText();
    updateCartProgress();
    updateSelectedItems();
  }
  
  updateAddButton();
}



// Update variant when select changes
function updateVariant(productId, variantId) {
  const productCard = document.querySelector(`[data-product-id="${productId}"]`);
  if (productCard) {
    productCard.dataset.variantId = variantId;
    
    // Update price
    const variantSelect = productCard.querySelector('.variant-select');
    const selectedOption = variantSelect.options[variantSelect.selectedIndex];
    const priceElement = productCard.querySelector('.product-price');
    if (priceElement && selectedOption) {
      priceElement.textContent = selectedOption.dataset.price;
    }
    
    // Update selected product if it's in the selection
    const selectedProduct = selectedProducts.find(p => p.id === productId);
    if (selectedProduct) {
      selectedProduct.variantId = parseInt(variantId);
      selectedProduct.price = selectedOption ? selectedOption.dataset.price : '';
    }
  }
}



// Update add button
function updateAddButton() {
  const addButton = document.getElementById('addBundleBtn');
  if (addButton) {
    const config = bundleConfig[currentBundleType];
    const minRequired = config.buy; // Minimum required to enable button
    
    addButton.disabled = selectedProducts.length < minRequired;
    
    // Update button text based on selection
    if (selectedProducts.length >= config.total) {
      addButton.textContent = `ADD ${config.total} SCENTS TO CART`;
    } else if (selectedProducts.length >= minRequired) {
      addButton.textContent = `ADD ${selectedProducts.length} SCENTS TO CART`;
    } else {
      addButton.textContent = `SELECT ${minRequired - selectedProducts.length} MORE SCENTS`;
    }
    
    console.log('Add button disabled:', addButton.disabled, 'selectedProducts:', selectedProducts.length, 'minRequired:', minRequired);
  }
}

// Filter functions
function filterProducts() {
  const searchTerm = document.getElementById('searchInput').value.toLowerCase();
  currentSearch = searchTerm;
  applyFilters();
}

function filterByCategory(category) {
  currentFilter = category;
  console.log('Filtering by category:', category);
  
  // Update filter buttons
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  event.target.classList.add('active');
  
  applyFilters();
}

function applyFilters() {
  const products = document.querySelectorAll('.product-card');
  
  products.forEach(product => {
    const title = product.querySelector('.product-title').textContent.toLowerCase();
    const tags = product.dataset.category; // tags are stored in data-category
    const matchesSearch = title.includes(currentSearch) || tags.includes(currentSearch);
    
    let matchesFilter = true;
    if (currentFilter !== 'all') {
      // Check if the product has the specific tag
      const tagArray = tags.split(' ');
      matchesFilter = tagArray.includes(currentFilter);
      console.log('Product:', title, 'Tags:', tags, 'Tag array:', tagArray, 'Looking for:', currentFilter, 'Matches:', matchesFilter);
    }
    
    if (matchesSearch && matchesFilter) {
      product.style.display = 'block';
    } else {
      product.style.display = 'none';
    }
  });
}

// Variant change handler
document.addEventListener('change', function(e) {
  if (e.target.classList.contains('variant-select')) {
    e.stopPropagation(); // Prevent triggering card click
    
    const productId = parseInt(e.target.dataset.productId);
    const selectedOption = e.target.options[e.target.selectedIndex];
    const productCard = e.target.closest('.product-card');
    const priceElement = productCard.querySelector('.product-price');
    
    // Update price display
    priceElement.textContent = selectedOption.dataset.price;
    
    // Update selected product if it's in the selection
    const selectedProduct = selectedProducts.find(p => p.id === productId);
    if (selectedProduct) {
      selectedProduct.variantId = parseInt(selectedOption.value);
      selectedProduct.price = selectedOption.dataset.price;
    }
  }
});

// Add single product to cart (for individual products)
function addSingleToCart(productId) {
  const productCard = document.querySelector(`[data-product-id="${productId}"]`);
  const variantSelect = productCard.querySelector('.variant-select');
  const selectedVariant = variantSelect.options[variantSelect.selectedIndex];
  
  const item = {
    id: parseInt(selectedVariant.value),
    quantity: 1
  };
  
  // Add visual feedback
  productCard.classList.add('adding');
  const indicator = productCard.querySelector('.add-to-cart-indicator');
  const originalText = indicator.textContent;
  indicator.textContent = 'ADDING...';
  
  // Add to cart using Shopify AJAX API
  fetch('/cart/add.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ items: [item] })
  })
  .then(response => response.json())
  .then(data => {
    if (data.status) {
      alert('Error adding product to cart: ' + data.description);
      // Reset visual feedback on error
      productCard.classList.remove('adding');
      indicator.textContent = originalText;
    } else {
      // Success - show feedback
      indicator.textContent = 'ADDED!';
      indicator.style.backgroundColor = '#218838';
      
      setTimeout(() => {
        productCard.classList.remove('adding');
        indicator.textContent = originalText;
        indicator.style.backgroundColor = '#222';
      }, 2000);
      
      // Optional: Update cart count
      if (typeof updateCartCount === 'function') {
        updateCartCount();
      }
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Error adding product to cart. Please try again.');
    // Reset visual feedback on error
    productCard.classList.remove('adding');
    indicator.textContent = originalText;
  });
}

// Add bundle to cart
function addBundleToCart() {
  const config = bundleConfig[currentBundleType];
  const minRequired = config.buy;
  
  if (selectedProducts.length < minRequired) {
    alert(`Please select at least ${minRequired} scents for this bundle`);
    return;
  }
  
  const items = selectedProducts.map(product => ({
    id: product.variantId,
    quantity: 1,
    properties: {
      '_bundle_type': currentBundleType,
      '_bundle_total': selectedProducts.length.toString()
    }
  }));
  
  // Add to cart using Shopify AJAX API
  fetch('/cart/add.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ items: items })
  })
  .then(response => response.json())
  .then(data => {
    if (data.status) {
      alert('Error adding bundle to cart: ' + data.description);
    } else {
      // Success - show success message
      alert(`Bundle added to cart successfully! You selected ${selectedProducts.length} scents.`);
      
      // Add builder tag to cart attributes
      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          attributes: {
            '_bundle_type': currentBundleType,
            '_bundle_total': selectedProducts.length.toString()
          }
        })
      });
      
      // Optional: Show success message or update cart count
      if (typeof updateCartCount === 'function') {
        updateCartCount();
      }
      
      // Optional: Redirect to cart
      // window.location.href = '/cart';
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Error adding bundle to cart. Please try again.');
  });
}


</script> 