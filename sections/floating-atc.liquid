<div id="floatingAtc" class="fixed bottom-0 left-0 right-0 bg-white z-10 [transform:translateY(100%)] [&.active]:[transform:translateY(0)] py-4 shadow-[0_0_20px_5px_rgba(0,0,0,0.1)] transition-transform duration-500">
  <div class="page-width">
    <div class="flex items-center justify-between">
      <div class="items-center gap-4 [display:none] md:flex">
        <img
          src="{{ product.featured_image | image_url: width: 100, height: 100, crop: 'center' }}"
          alt="{{ product.title }}"
          width="100"
          height="100"
          class="size-14"
          loading="lazy">
        <div>
          <h2 class="text-lg font-semibold m-0">
            {{ product.title }}
          </h2>
          <p class="text-base m-0 current-price">{{ product.selected_or_first_available_variant.price | money }}</p>
        </div>
      </div>
      <button class="flex justify-center bg-[#226139] text-white px-8 py-3 rounded-full border-0 tracking-wide text-xl shadow cursor-pointer hover:bg-[#1c522f] transition-colors w-full md:w-auto">
        <span>Add to Cart</span>
        <div class="ml-2 pl-2 border-0 border-l-2 flex items-center border-solid border-gray-200/20 md:hidden">
          <span class="current-price">{{ product.selected_or_first_available_variant.price | money }}</span>
        </div>
      </button>
    </div>
  </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const atcBtn = document.querySelector('.cta_product_from_submit_btn');
        const floatingAtc = document.getElementById('floatingAtc');
        const floatingAtcBtn = document.querySelector('#floatingAtc button');

        if(!atcBtn || !floatingAtc || !floatingAtcBtn) return;

        // Observe the scrollToTarget's bottom crossing the viewport top
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                if (entry.boundingClientRect.bottom < 0) {
                    // scrolled past (above viewport)
                    floatingAtc.classList.add('active');
                } else {
                    // partially or fully visible in viewport
                    floatingAtc.classList.remove('active');
                }
                });
            },
            {
                threshold: [0],
                root: null,
                rootMargin: '0px',
            }
        );

        observer.observe(atcBtn);

        floatingAtcBtn.addEventListener('click', () => {
            // Scroll to top
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
            // Create and dispatch a proper click event that will trigger existing listeners
            const clickEvent = new MouseEvent('click', {
                view: window,
                bubbles: true,
                cancelable: true
            });
            atcBtn.dispatchEvent(clickEvent);
        });
    });

</script>

{% schema %}
  {
    "name": "Floating ATC",
    "tag": "section",
    "settings": [],
    "presets": [
      {
        "name": "Floating ATC"
      }
    ]
  }
{% endschema %}