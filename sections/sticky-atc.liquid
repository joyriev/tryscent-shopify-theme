{% if section.settings.enable_section and request.page_type == 'product' and product.available %}
  {% liquid
    assign current_variant = product.selected_or_first_available_variant
    assign product_form_id = 'product-form-' | append: section.id
    assign image = current_variant.image | default: product.featured_image
    assign img_size = section.settings.img_width | append: 'x' | append: section.settings.img_height
  %}

  <style>
    #md-sticky-atc {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      z-index: 1000;
      visibility: hidden;
      opacity: 0;
      transform: translateY(100%);
      transition: all 0.15s ease-out;
      border-top: 0.1rem solid rgba(var(--color-foreground), 0.08);
      background: white;
      box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);
    }
    #md-sticky-atc.show {
      visibility: visible;
      opacity: 1;
      transform: translateY(0);
    }
    .atc-sticky-btn quantity-input.quantity {
      width: 25%;
    }
    #md-sticky-atc .page-width-inner {
      padding: 16px 0;
    }
    @media (min-width: 990px) {
      #md-sticky-atc .page-width-inner {
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
    }
    #md-sticky-atc .product-content {
      display: flex;
      align-items: center;
      padding-bottom: 1rem;
    }
    @media (min-width: 990px) {
      #md-sticky-atc .product-content {
        padding-bottom: 0;
        padding-right: 2rem;
      }
    }
    #md-sticky-atc .product-content .price {
      display: flex;
      align-items: center;
    }
    #md-sticky-atc .product-content img {
      margin-right: 0.75rem;
    }

    #md-sticky-atc .product-form .quantity-input-wrapper {
      display: flex;
      align-items: center;
      background: #fff;
    }
    #md-sticky-atc .product-form .quantity {
      display: none;
      flex-shrink: 0;
      margin-right: 0.75rem;
    }
    #md-sticky-atc .product-form .select::after,
    #md-sticky-atc .product-form .quantity::after {
      border-radius: 2px;
    }
    @media (min-width: 990px) {
      #md-sticky-atc .product-form .quantity {
        display: flex;
      }
    }
    #md-sticky-atc .product-form button[name="add"] {
      flex-shrink: 0;
      flex-grow: 1;
      margin: 0;
    }
    @media (max-width: 800px) {
      #md-sticky-atc {
        display: block;
      }
    }
  </style>

  <script>
      if (typeof Shopify === 'undefined') {
    var Shopify = {};
      }

      Shopify.formatMoney = function (cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }

    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;

    function formatWithDelimiters(number, precision = 2, thousands = ',', decimal = '.') {
      if (isNaN(number) || number == null) return 0;

      number = (number / 100.0).toFixed(precision);
      var parts = number.split('.');
      var dollars = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousands);
      var cents = parts[1] ? decimal + parts[1] : '';
      return dollars + cents;
    }

    switch (format) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
      default:
        value = formatWithDelimiters(cents, 2);
    }

    return format.replace(placeholderRegex, value);
      };

      document.addEventListener('DOMContentLoaded', () => {
    console.log('Sticky ATC: DOM loaded, initializing...');
    
    const stickyATC = document.querySelector('#md-sticky-atc');
    if (!stickyATC) {
      console.error('Sticky ATC: #md-sticky-atc element not found!');
      return;
    }
    
    console.log('Sticky ATC: Found sticky element:', stickyATC);

    const selectField = stickyATC.querySelector('select[name="id"]');
    const priceBox = stickyATC.querySelector('#price-{{ section.id }}');
    const img = stickyATC.querySelector('.product-content img');
    const productData = {{ product | json }};
    const offset = parseInt(stickyATC.dataset.offset || 0);
    const moneyFormat = "{{ shop.money_format | replace: '<span class=money>', '' | replace: '</span>', '' }}";

    let threshold = 0;

    window.addEventListener('load', () => {
      const addToCartBtn = document.querySelector('button[name="add"]');
      if (addToCartBtn) {
        threshold = addToCartBtn.getBoundingClientRect().top + window.scrollY + offset;
      }

      // INITIAL VARIANT ON LOAD
      if (selectField) {
        const initialVariantId = parseInt(selectField.value);
        const selectedVariant = productData.variants.find(v => v.id === initialVariantId);
        const stickyPrice = document.querySelector('#stick-price');

        if (selectedVariant && stickyPrice) {
          const newPrice = Shopify.formatMoney(selectedVariant.price, moneyFormat);
          stickyPrice.textContent = newPrice;
        }

        const selectedOption = selectField.querySelector(`option[value="${initialVariantId}"]`);
        const imgUrl = selectedOption?.dataset.img;
        if (imgUrl && img) {
          img.setAttribute('src', imgUrl);
        }
      }
    });

    // Show/hide sticky ATC using Intersection Observer
    const atcBtn = document.querySelector('.cta_product_from_submit_btn') || 
                   document.querySelector('button[name="add"]') ||
                   document.querySelector('.product-form__submit');
    
    console.log('Sticky ATC: Found main button:', atcBtn);
    
    if (atcBtn) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            console.log('Sticky ATC: Intersection entry:', entry.isIntersecting, entry.boundingClientRect);
            
            if (!entry.isIntersecting && entry.boundingClientRect.bottom < 0) {
              // scrolled past (above viewport)
              console.log('Sticky ATC: Showing sticky button');
              stickyATC.classList.add('show');
              document.documentElement.style.paddingBottom = `${stickyATC.offsetHeight}px`;
            } else {
              // partially or fully visible in viewport
              console.log('Sticky ATC: Hiding sticky button');
              stickyATC.classList.remove('show');
              document.documentElement.style.paddingBottom = '0';
            }
          });
        },
        {
          threshold: [0],
          root: null,
          rootMargin: '0px',
        }
      );
      observer.observe(atcBtn);
    } else {
      console.error('Sticky ATC: Main ATC button not found!');
    }
    
    // Debug: Manual test button (remove in production)
    if (window.location.search.includes('sticky_debug=1')) {
      const debugBtn = document.createElement('button');
      debugBtn.textContent = 'Test Sticky ATC';
      debugBtn.style.position = 'fixed';
      debugBtn.style.top = '10px';
      debugBtn.style.right = '10px';
      debugBtn.style.zIndex = '9999';
      debugBtn.style.background = 'red';
      debugBtn.style.color = 'white';
      debugBtn.style.padding = '10px';
      debugBtn.onclick = () => {
        stickyATC.classList.toggle('show');
        console.log('Sticky ATC: Manual toggle, show class:', stickyATC.classList.contains('show'));
      };
      document.body.appendChild(debugBtn);
    }

    // Handle variant change
    if (selectField) {
      selectField.addEventListener('change', (e) => {
        const variantId = parseInt(e.target.value);
        const selectedVariant = productData.variants.find(v => v.id === variantId);
        const stickyPrice = document.querySelector('#stick-price');

        // Update price
        if (selectedVariant && stickyPrice) {
          const newPrice = Shopify.formatMoney(selectedVariant.price, moneyFormat);
          stickyPrice.textContent = newPrice;
        }

        //Update image
        const imgUrl = e.target.options[e.target.selectedIndex].dataset.img;
        if (imgUrl && img) {
          img.setAttribute('src', imgUrl);
        }

        //Update URL
        const newUrl = `${window.location.pathname}?variant=${variantId}`;
        window.history.replaceState({ path: newUrl }, '', newUrl);
      });
    }
      });
  </script>

  <div
    id="md-sticky-atc"
    class="atc-sticky-btn shadow-[0_0_20px_5px_rgba(0,0,0,0.1)] color-{{ section.settings.color_scheme }}"
    data-offset="{{ section.settings.offset }}">
    <div class="page-width">
      <div class="page-width-inner">
        <div class="product-content">
          {% if section.settings.show_img %}
            <img
              src="{{ image | img_url: img_size, crop: 'center' }}"
              class="rounded-lg"
              width="{{ section.settings.img_width }}"
              height="{{ section.settings.img_height }}"
              loading="lazy">
          {% endif %}
          <div class="">
            <h3 class="product__title text-lg font-semibold !m-0">
              {{ product.title }}
            </h3>
            <div
              class="no-js-hidden"
              id="price-{{ section.id }}"
              role="status"
              {{ block.shopify_attributes }}>
              <span id="stick-price" class="money">{{ product.price | money_with_currency }}</span>
            </div>
          </div>
        </div>
        <product-form class="product-form">
          <div
            class="product-form__error-message-wrapper"
            role="alert"
            hidden>
            <svg
              aria-hidden="true"
              focusable="false"
              role="presentation"
              class="icon icon-error"
              viewBox="0 0 13 13">
              <circle
                cx="6.5"
                cy="6.50049"
                r="5.5"
                stroke="white"
                stroke-width="2" />
              <circle
                cx="6.5"
                cy="6.5"
                r="5.5"
                fill="#EB001B"
                stroke="#EB001B"
                stroke-width="0.7" />
              <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white" />
              <path
                d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z"
                fill="white"
                stroke="#EB001B"
                stroke-width="0.7">
            </svg>
            <span class="product-form__error-message"></span>
          </div>
          {%- form 'product'
            , product
            , id: product_form_id
            , class: 'form'
            , novalidate: 'novalidate' -%}
            <div class="quantity-input-wrapper">
              <div class="select mr-2 w-auto fixed -top-[99999px] -left-[99999px]" style="{% if product.has_only_default_variant %}display: none;{% endif %}">
                <select
                  class="select__select !w-auto !px-6 sticky_atc_variant_selector"
                  name="id"
                  aria-label="Select variant">
                  {% for variant in product.variants %}
                    {% assign variant_image = variant.image | default: product.featured_image %}
                    <option
                      value="{{ variant.id }}"
                      data-price="{{ variant.price | money_without_currency }}"
                      data-img="{{ variant_image | img_url: img_size }}"
                      {% if current_variant.id == variant.id %}
                      selected{% endif %}>
                      {{ variant.title }} - {{ variant.price | money }}
                    </option>
                  {% endfor %}
                </select>

              </div>
              {% if section.settings.show_quantity_input %}
                <quantity-input class="quantity min-w-[92px]">
                  <button
                    class="quantity__button no-js-hidden"
                    name="minus"
                    type="button">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.decrease' | t: product: product.title | escape -}}
                    </span>
                    <span class="svg-wrapper">
                      {{- 'icon-minus.svg' | inline_asset_content -}}
                    </span>
                  </button>
                  <input
                    class="quantity__input"
                    type="number"
                    name="quantity"
                    id="Quantity-{{ section.id }}"
                    min="1"
                    value="1"
                    form="{{ product_form_id }}">
                  <button
                    class="quantity__button no-js-hidden"
                    name="plus"
                    type="button">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.increase' | t: product: product.title | escape -}}
                    </span>
                    <span class="svg-wrapper">
                      {{- 'icon-plus.svg' | inline_asset_content -}}
                    </span>
                  </button>
                </quantity-input>
              {% endif %}
              <button
                type="submit"
                name="add"
                class="product-form__submit button bg-[#226139] rounded hover:bg-[#1c522f] uppercase tracking-wider">
                <span>
                  {%- if current_variant.available -%}
                    {{ 'products.product.add_to_cart' | t }}
                  {%- else -%}
                    {{ 'products.product.sold_out' | t }}
                  {%- endif -%}
                </span>
                <div class="loading__spinner hidden">
                  <svg aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                    <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30" style="stroke: rgb(var(--color-background));"></circle>
                  </svg>
                </div>
              </button>
            </div>
          {% endform %}
        </product-form>
      </div>
    </div>
  </div>
{% endif %}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const variantSelect = document.querySelector('.sticky_atc_variant_selector');
        console.log('Sticky ATC: Variant select element:', variantSelect);

        if (typeof subscribe !== 'undefined' && typeof PUB_SUB_EVENTS !== 'undefined') {
            subscribe(PUB_SUB_EVENTS.variantChange, function (eventData) {
                const variantId = eventData.data.variant.id;
                console.log('Sticky ATC: Variant changed to:', variantId);

                if (variantSelect) {
                    variantSelect.value = variantId;
                    const event = new Event('change', { bubbles: true });
                    variantSelect.dispatchEvent(event);
                }
            });
        } else {
            console.warn('Sticky ATC: PubSub system not available, variant sync disabled');
        }
    });

</script>

{% schema %}
  {
    "name": "Sticky ATC",
    "settings": [
      {
        "type": "header",
        "content": "General"
      },
      {
        "type": "checkbox",
        "id": "enable_section",
        "label": "Enable \"Sticky ATC\"",
        "info": "Quickly enable or disable this feature",
        "default": true
      },
      {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      },
      {
        "type": "select",
        "id": "title_size",
        "label": "Title Size",
        "default": "h4",
        "options": [
          {
            "value": "h1",
            "label": "H1"
          },
          {
            "value": "h2",
            "label": "H2"
          },
          {
            "value": "h3",
            "label": "H3"
          },
          {
            "value": "h4",
            "label": "H4"
          }, {
            "value": "h5",
            "label": "H5"
          }, {
            "value": "h6",
            "label": "H6"
          }
        ]
      }, {
        "type": "checkbox",
        "id": "show_img",
        "default": true,
        "label": "Show image"
      }, {
        "type": "text",
        "id": "img_width",
        "default": "80",
        "label": "Image width (px)"
      }, {
        "type": "text",
        "id": "img_height",
        "default": "80",
        "label": "Image height (px)"
      }, {
        "type": "checkbox",
        "id": "show_quantity_input",
        "default": true,
        "label": "Show quantity field"
      }, {
        "type": "select",
        "id": "btn_style",
        "options": [
          {
            "value": "primary",
            "label": "Primary"
          }, {
            "value": "secondary",
            "label": "Secondary"
          }
        ],
        "default": "primary",
        "label": "'Add to cart' button style"
      }, {
        "type": "header",
        "content": "Advanced"
      }, {
        "type": "range",
        "id": "offset",
        "label": "Offset",
        "min": 0,
        "max": 500,
        "step": 10,
        "default": 0,
        "info": "Adjust the offset value when showing the Sticky ATC section related to the main product form."
      }, {
        "type": "header",
        "content": "Spacing",
        "info": "Based on 'rem' values"
      }, {
        "type": "range",
        "id": "pt",
        "label": "Padding top",
        "min": 0,
        "max": 5,
        "step": 0.5,
        "default": 0.5
      }, {
        "type": "range",
        "id": "pb",
        "label": "Padding bottom",
        "min": 0,
        "max": 5,
        "step": 0.5,
        "default": 0.5
      }
    ],
    "presets": [
      {
        "name": "Sticky ATC"
      }
    ]
  }
{% endschema %}